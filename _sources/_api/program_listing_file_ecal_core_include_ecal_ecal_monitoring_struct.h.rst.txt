
.. _program_listing_file_ecal_core_include_ecal_ecal_monitoring_struct.h:

Program Listing for File ecal_monitoring_struct.h
=================================================

|exhale_lsh| :ref:`Return to documentation for file <file_ecal_core_include_ecal_ecal_monitoring_struct.h>` (``ecal/core/include/ecal/ecal_monitoring_struct.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /* ========================= eCAL LICENSE =================================
    *
    * Copyright (C) 2016 - 2019 Continental Corporation
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    * 
    *      http://www.apache.org/licenses/LICENSE-2.0
    * 
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    *
    * ========================= eCAL LICENSE =================================
   */
   
   #pragma once
   
   #include <ecal/ecal_os.h>
   #include <ecal/ecal_monitoring_entity.h>
   
   #include <map>
   #include <string>
   #include <vector>
   
   namespace eCAL
   {
     namespace Monitoring
     {
       struct STopicMon                                            //<! eCAL Topic struct
       {
         STopicMon()
         {
           rclock             = 0;
           hid                = 0;
           pid                = 0;
           tsize              = 0;
           tlayer_ecal_udp_mc = false;
           tlayer_ecal_shm    = false;
           tlayer_ecal_tcp    = false;
           tlayer_inproc      = false;
           connections_loc    = 0;
           connections_ext    = 0;
           message_drops      = 0;
           did                = 0;
           dclock             = 0;
           dfreq              = 0;
         };
   
         int                                 rclock;               
         int                                 hid;                  
         std::string                         hname;                
         int                                 pid;                  
         std::string                         pname;                
         std::string                         uname;                
         std::string                         tid;                  
         std::string                         tname;                
         std::string                         direction;            
         std::string                         ttype;                
         std::string                         tdesc;                
         int                                 tsize;                
   
         bool                                tlayer_ecal_udp_mc;   
         bool                                tlayer_ecal_shm;      
         bool                                tlayer_ecal_tcp;      
         bool                                tlayer_inproc;        
   
         int                                 connections_loc;      
         int                                 connections_ext;      
         long long                           message_drops;        
   
         long long                           did;                  
         long long                           dclock;               
         long                                dfreq;                
   
         std::map<std::string, std::string>  attr;                 
       };
   
       struct SProcessMon                                          //<! eCAL Process struct
       {
         SProcessMon()
         {
           rclock               = 0;
           pid                  = 0;
           pmemory              = 0;
           pcpu                 = 0.0f;
           usrptime             = 0.0f;
           datawrite            = 0;
           dataread             = 0;
           state_severity       = 0;
           state_severity_level = 0;
           tsync_state          = 0;
           component_init_state = 0;
         };
   
         int            rclock;                                    
         std::string    hname;                                     
         int            pid;                                       
         std::string    pname;                                     
         std::string    uname;                                     
         std::string    pparam;                                    
   
         long long      pmemory;                                   
         float          pcpu;                                      
         float          usrptime;                                  
   
         long long      datawrite;                                 
         long long      dataread;                                  
   
         int            state_severity;                            
         int            state_severity_level;                      
   
         std::string    state_info;                                
   
         int            tsync_state;                               
         std::string    tsync_mod_name;                            
   
         int            component_init_state;                      
         std::string    component_init_info;                       
   
         std::string    ecal_runtime_version;                      
       };
   
       struct SMethodMon                                           //<! eCAL Server Method struct
       {
         SMethodMon()
         {
           call_count = 0;
         };
         std::string  mname;                                       //<! method name
         std::string  req_type;                                    //<! request type
         std::string  req_desc;                                    //<! request descriptor
         std::string  resp_type;                                   //<! response type
         std::string  resp_desc;                                   //<! response descriptor
         long long    call_count;                                  //<! call counter
       };
   
       struct SServerMon                                           //<! eCAL Server struct
       {
         SServerMon()
         {
           rclock   = 0;
           pid      = 0;
           tcp_port = 0;
         };
   
         int                      rclock;                          //<! registration clock    
         std::string              hname;                           //<! host name
         std::string              pname;                           //<! process name
         std::string              uname;                           //<! unit name
         int                      pid;                             //<! process id
   
         std::string              sname;                           //<! service name
         std::string              sid;                             //<! service id
   
         int                      tcp_port;                        //<! the tcp port used for that service
   
         std::vector<SMethodMon>  methods;                         //<! list of methods
       };
   
       struct SClientMon                                           //<! eCAL Client struct
       {
         SClientMon()
         {
           rclock = 0;
           pid    = 0;
         };
   
         int          rclock;                                      //<! registration clock
         std::string  hname;                                       //<! host name
         std::string  pname;                                       //<! process name
         std::string  uname;                                       //<! unit name
         int          pid;                                         //<! process id
   
         std::string  sname;                                       //<! service name
         std::string  sid;                                         //<! service id
       };
   
       struct SMonitoring                                          //<! eCAL Monitoring struct
       {
         std::vector<SProcessMon>  process;                        //<! process info
         std::vector<STopicMon>    publisher;                      //<! publisher info vector
         std::vector<STopicMon>    subscriber;                     //<! subscriber info vector
         std::vector<SServerMon>   server;                         //<! server info vector
         std::vector<SClientMon>   clients;                        //<! clients info vector
       };
   
       ECAL_API int GetMonitoring(eCAL::Monitoring::SMonitoring& mon_, unsigned int entities_ = Entity::All);
     }
   }
